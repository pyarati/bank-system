{"remainingRequest":"/home/arati/workspace/Vue/rout/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/arati/workspace/Vue/rout/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/arati/workspace/Vue/rout/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/arati/workspace/Vue/rout/src/components/signup.vue?vue&type=template&id=56bbef28&","dependencies":[{"path":"/home/arati/workspace/Vue/rout/src/components/signup.vue","mtime":1632166227792},{"path":"/home/arati/workspace/Vue/rout/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/arati/workspace/Vue/rout/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/arati/workspace/Vue/rout/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/arati/workspace/Vue/rout/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}